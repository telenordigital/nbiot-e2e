// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nanopb/generator/proto/nanopb.proto

/*
Package nanopb is a generated protocol buffer package.

It is generated from these files:
	nanopb/generator/proto/nanopb.proto

It has these top-level messages:
	NanoPBOptions
*/
package nanopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FieldType int32

const (
	FieldType_FT_DEFAULT  FieldType = 0
	FieldType_FT_CALLBACK FieldType = 1
	FieldType_FT_POINTER  FieldType = 4
	FieldType_FT_STATIC   FieldType = 2
	FieldType_FT_IGNORE   FieldType = 3
	FieldType_FT_INLINE   FieldType = 5
)

var FieldType_name = map[int32]string{
	0: "FT_DEFAULT",
	1: "FT_CALLBACK",
	4: "FT_POINTER",
	2: "FT_STATIC",
	3: "FT_IGNORE",
	5: "FT_INLINE",
}
var FieldType_value = map[string]int32{
	"FT_DEFAULT":  0,
	"FT_CALLBACK": 1,
	"FT_POINTER":  4,
	"FT_STATIC":   2,
	"FT_IGNORE":   3,
	"FT_INLINE":   5,
}

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}
func (x FieldType) String() string {
	return proto.EnumName(FieldType_name, int32(x))
}
func (x *FieldType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FieldType_value, data, "FieldType")
	if err != nil {
		return err
	}
	*x = FieldType(value)
	return nil
}
func (FieldType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type IntSize int32

const (
	IntSize_IS_DEFAULT IntSize = 0
	IntSize_IS_8       IntSize = 8
	IntSize_IS_16      IntSize = 16
	IntSize_IS_32      IntSize = 32
	IntSize_IS_64      IntSize = 64
)

var IntSize_name = map[int32]string{
	0:  "IS_DEFAULT",
	8:  "IS_8",
	16: "IS_16",
	32: "IS_32",
	64: "IS_64",
}
var IntSize_value = map[string]int32{
	"IS_DEFAULT": 0,
	"IS_8":       8,
	"IS_16":      16,
	"IS_32":      32,
	"IS_64":      64,
}

func (x IntSize) Enum() *IntSize {
	p := new(IntSize)
	*p = x
	return p
}
func (x IntSize) String() string {
	return proto.EnumName(IntSize_name, int32(x))
}
func (x *IntSize) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IntSize_value, data, "IntSize")
	if err != nil {
		return err
	}
	*x = IntSize(value)
	return nil
}
func (IntSize) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// This is the inner options message, which basically defines options for
// a field. When it is used in message or file scope, it applies to all
// fields.
type NanoPBOptions struct {
	// Allocated size for 'bytes' and 'string' fields.
	// For string fields, this should include the space for null terminator.
	MaxSize *int32 `protobuf:"varint,1,opt,name=max_size,json=maxSize" json:"max_size,omitempty"`
	// Maximum length for 'string' fields. Setting this is equivalent
	// to setting max_size to a value of length+1.
	MaxLength *int32 `protobuf:"varint,14,opt,name=max_length,json=maxLength" json:"max_length,omitempty"`
	// Allocated number of entries in arrays ('repeated' fields)
	MaxCount *int32 `protobuf:"varint,2,opt,name=max_count,json=maxCount" json:"max_count,omitempty"`
	// Size of integer fields. Can save some memory if you don't need
	// full 32 bits for the value.
	IntSize *IntSize `protobuf:"varint,7,opt,name=int_size,json=intSize,enum=IntSize,def=0" json:"int_size,omitempty"`
	// Force type of field (callback or static allocation)
	Type *FieldType `protobuf:"varint,3,opt,name=type,enum=FieldType,def=0" json:"type,omitempty"`
	// Use long names for enums, i.e. EnumName_EnumValue.
	LongNames *bool `protobuf:"varint,4,opt,name=long_names,json=longNames,def=1" json:"long_names,omitempty"`
	// Add 'packed' attribute to generated structs.
	// Note: this cannot be used on CPUs that break on unaligned
	// accesses to variables.
	PackedStruct *bool `protobuf:"varint,5,opt,name=packed_struct,json=packedStruct,def=0" json:"packed_struct,omitempty"`
	// Add 'packed' attribute to generated enums.
	PackedEnum *bool `protobuf:"varint,10,opt,name=packed_enum,json=packedEnum,def=0" json:"packed_enum,omitempty"`
	// Skip this message
	SkipMessage *bool `protobuf:"varint,6,opt,name=skip_message,json=skipMessage,def=0" json:"skip_message,omitempty"`
	// Generate oneof fields as normal optional fields instead of union.
	NoUnions *bool `protobuf:"varint,8,opt,name=no_unions,json=noUnions,def=0" json:"no_unions,omitempty"`
	// integer type tag for a message
	Msgid *uint32 `protobuf:"varint,9,opt,name=msgid" json:"msgid,omitempty"`
	// decode oneof as anonymous union
	AnonymousOneof *bool `protobuf:"varint,11,opt,name=anonymous_oneof,json=anonymousOneof,def=0" json:"anonymous_oneof,omitempty"`
	// Proto3 singular field does not generate a "has_" flag
	Proto3 *bool `protobuf:"varint,12,opt,name=proto3,def=0" json:"proto3,omitempty"`
	// Generate an enum->string mapping function (can take up lots of space).
	EnumToString *bool `protobuf:"varint,13,opt,name=enum_to_string,json=enumToString,def=0" json:"enum_to_string,omitempty"`
	// Generate bytes arrays with fixed length
	FixedLength *bool `protobuf:"varint,15,opt,name=fixed_length,json=fixedLength,def=0" json:"fixed_length,omitempty"`
	// Generate repeated field with fixed count
	FixedCount       *bool  `protobuf:"varint,16,opt,name=fixed_count,json=fixedCount,def=0" json:"fixed_count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NanoPBOptions) Reset()                    { *m = NanoPBOptions{} }
func (m *NanoPBOptions) String() string            { return proto.CompactTextString(m) }
func (*NanoPBOptions) ProtoMessage()               {}
func (*NanoPBOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_NanoPBOptions_IntSize IntSize = IntSize_IS_DEFAULT
const Default_NanoPBOptions_Type FieldType = FieldType_FT_DEFAULT
const Default_NanoPBOptions_LongNames bool = true
const Default_NanoPBOptions_PackedStruct bool = false
const Default_NanoPBOptions_PackedEnum bool = false
const Default_NanoPBOptions_SkipMessage bool = false
const Default_NanoPBOptions_NoUnions bool = false
const Default_NanoPBOptions_AnonymousOneof bool = false
const Default_NanoPBOptions_Proto3 bool = false
const Default_NanoPBOptions_EnumToString bool = false
const Default_NanoPBOptions_FixedLength bool = false
const Default_NanoPBOptions_FixedCount bool = false

func (m *NanoPBOptions) GetMaxSize() int32 {
	if m != nil && m.MaxSize != nil {
		return *m.MaxSize
	}
	return 0
}

func (m *NanoPBOptions) GetMaxLength() int32 {
	if m != nil && m.MaxLength != nil {
		return *m.MaxLength
	}
	return 0
}

func (m *NanoPBOptions) GetMaxCount() int32 {
	if m != nil && m.MaxCount != nil {
		return *m.MaxCount
	}
	return 0
}

func (m *NanoPBOptions) GetIntSize() IntSize {
	if m != nil && m.IntSize != nil {
		return *m.IntSize
	}
	return Default_NanoPBOptions_IntSize
}

func (m *NanoPBOptions) GetType() FieldType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_NanoPBOptions_Type
}

func (m *NanoPBOptions) GetLongNames() bool {
	if m != nil && m.LongNames != nil {
		return *m.LongNames
	}
	return Default_NanoPBOptions_LongNames
}

func (m *NanoPBOptions) GetPackedStruct() bool {
	if m != nil && m.PackedStruct != nil {
		return *m.PackedStruct
	}
	return Default_NanoPBOptions_PackedStruct
}

func (m *NanoPBOptions) GetPackedEnum() bool {
	if m != nil && m.PackedEnum != nil {
		return *m.PackedEnum
	}
	return Default_NanoPBOptions_PackedEnum
}

func (m *NanoPBOptions) GetSkipMessage() bool {
	if m != nil && m.SkipMessage != nil {
		return *m.SkipMessage
	}
	return Default_NanoPBOptions_SkipMessage
}

func (m *NanoPBOptions) GetNoUnions() bool {
	if m != nil && m.NoUnions != nil {
		return *m.NoUnions
	}
	return Default_NanoPBOptions_NoUnions
}

func (m *NanoPBOptions) GetMsgid() uint32 {
	if m != nil && m.Msgid != nil {
		return *m.Msgid
	}
	return 0
}

func (m *NanoPBOptions) GetAnonymousOneof() bool {
	if m != nil && m.AnonymousOneof != nil {
		return *m.AnonymousOneof
	}
	return Default_NanoPBOptions_AnonymousOneof
}

func (m *NanoPBOptions) GetProto3() bool {
	if m != nil && m.Proto3 != nil {
		return *m.Proto3
	}
	return Default_NanoPBOptions_Proto3
}

func (m *NanoPBOptions) GetEnumToString() bool {
	if m != nil && m.EnumToString != nil {
		return *m.EnumToString
	}
	return Default_NanoPBOptions_EnumToString
}

func (m *NanoPBOptions) GetFixedLength() bool {
	if m != nil && m.FixedLength != nil {
		return *m.FixedLength
	}
	return Default_NanoPBOptions_FixedLength
}

func (m *NanoPBOptions) GetFixedCount() bool {
	if m != nil && m.FixedCount != nil {
		return *m.FixedCount
	}
	return Default_NanoPBOptions_FixedCount
}

var E_NanopbFileopt = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*NanoPBOptions)(nil),
	Field:         1010,
	Name:          "nanopb_fileopt",
	Tag:           "bytes,1010,opt,name=nanopb_fileopt,json=nanopbFileopt",
	Filename:      "nanopb/generator/proto/nanopb.proto",
}

var E_NanopbMsgopt = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*NanoPBOptions)(nil),
	Field:         1010,
	Name:          "nanopb_msgopt",
	Tag:           "bytes,1010,opt,name=nanopb_msgopt,json=nanopbMsgopt",
	Filename:      "nanopb/generator/proto/nanopb.proto",
}

var E_NanopbEnumopt = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumOptions)(nil),
	ExtensionType: (*NanoPBOptions)(nil),
	Field:         1010,
	Name:          "nanopb_enumopt",
	Tag:           "bytes,1010,opt,name=nanopb_enumopt,json=nanopbEnumopt",
	Filename:      "nanopb/generator/proto/nanopb.proto",
}

var E_Nanopb = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*NanoPBOptions)(nil),
	Field:         1010,
	Name:          "nanopb",
	Tag:           "bytes,1010,opt,name=nanopb",
	Filename:      "nanopb/generator/proto/nanopb.proto",
}

func init() {
	proto.RegisterType((*NanoPBOptions)(nil), "NanoPBOptions")
	proto.RegisterEnum("FieldType", FieldType_name, FieldType_value)
	proto.RegisterEnum("IntSize", IntSize_name, IntSize_value)
	proto.RegisterExtension(E_NanopbFileopt)
	proto.RegisterExtension(E_NanopbMsgopt)
	proto.RegisterExtension(E_NanopbEnumopt)
	proto.RegisterExtension(E_Nanopb)
}

func init() { proto.RegisterFile("nanopb/generator/proto/nanopb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x5f, 0x6f, 0xda, 0x3c,
	0x14, 0xc6, 0x4b, 0x0b, 0x25, 0x1c, 0xfe, 0x34, 0xb2, 0xde, 0x0b, 0xbf, 0x7d, 0xdf, 0x6a, 0xa8,
	0x95, 0x2a, 0xc4, 0xa4, 0xa0, 0xb5, 0x53, 0x35, 0x71, 0x35, 0x4a, 0xc9, 0x14, 0x8d, 0x42, 0x15,
	0xd2, 0x6b, 0x2b, 0x05, 0x93, 0x79, 0x24, 0x76, 0x44, 0x1c, 0x89, 0xf6, 0x43, 0xef, 0x62, 0x9f,
	0x60, 0xb2, 0x9d, 0x76, 0xa0, 0x55, 0xea, 0xee, 0x72, 0x9e, 0xdf, 0x93, 0x47, 0xb6, 0xcf, 0x39,
	0x70, 0xc6, 0x43, 0x2e, 0xd2, 0x87, 0x5e, 0x44, 0x39, 0x5d, 0x87, 0x52, 0xac, 0x7b, 0xe9, 0x5a,
	0x48, 0xd1, 0x33, 0xb2, 0xa3, 0x8b, 0xe3, 0x76, 0x24, 0x44, 0x14, 0x53, 0x83, 0x1e, 0xf2, 0x65,
	0x6f, 0x41, 0xb3, 0xf9, 0x9a, 0xa5, 0x52, 0xac, 0x8d, 0xe3, 0xf4, 0x47, 0x19, 0x9a, 0x93, 0x90,
	0x8b, 0xbb, 0xeb, 0x69, 0x2a, 0x99, 0xe0, 0x19, 0xfa, 0x17, 0xac, 0x24, 0xdc, 0x90, 0x8c, 0x3d,
	0x51, 0x5c, 0x6a, 0x97, 0x3a, 0x15, 0xbf, 0x9a, 0x84, 0x9b, 0x19, 0x7b, 0xa2, 0xe8, 0x04, 0x40,
	0xa1, 0x98, 0xf2, 0x48, 0x7e, 0xc3, 0x2d, 0x0d, 0x6b, 0x49, 0xb8, 0x19, 0x6b, 0x01, 0xfd, 0x07,
	0xaa, 0x20, 0x73, 0x91, 0x73, 0x89, 0xf7, 0x35, 0x55, 0x51, 0x43, 0x55, 0xa3, 0x1e, 0x58, 0x8c,
	0x4b, 0x13, 0x5b, 0x6d, 0x97, 0x3a, 0xad, 0x0b, 0xcb, 0xf1, 0xb8, 0x54, 0xb9, 0x7d, 0xf0, 0x66,
	0xe4, 0x66, 0xe4, 0x0e, 0xee, 0xc7, 0x81, 0x5f, 0x65, 0x46, 0x44, 0x5d, 0x28, 0xcb, 0xc7, 0x94,
	0xe2, 0x03, 0x6d, 0x06, 0xc7, 0x65, 0x34, 0x5e, 0x04, 0x8f, 0x29, 0xed, 0x83, 0x1b, 0xbc, 0xd8,
	0xb5, 0x07, 0x9d, 0x01, 0xc4, 0x82, 0x47, 0x84, 0x87, 0x09, 0xcd, 0x70, 0xb9, 0x5d, 0xea, 0x58,
	0xfd, 0xb2, 0x5c, 0xe7, 0xd4, 0xaf, 0x29, 0x7d, 0xa2, 0x64, 0xd4, 0x85, 0x66, 0x1a, 0xce, 0x57,
	0x74, 0x41, 0x32, 0xb9, 0xce, 0xe7, 0x12, 0x57, 0xb4, 0xaf, 0xb2, 0x0c, 0xe3, 0x8c, 0xfa, 0x0d,
	0xc3, 0x66, 0x1a, 0xa1, 0x73, 0xa8, 0x17, 0x5e, 0xca, 0xf3, 0x04, 0xc3, 0xb6, 0x13, 0x0c, 0x19,
	0xf1, 0x3c, 0x41, 0x1d, 0x68, 0x64, 0x2b, 0x96, 0x92, 0x84, 0x66, 0x59, 0x18, 0x51, 0x7c, 0xb8,
	0x6d, 0xac, 0x2b, 0x74, 0x6b, 0x08, 0x3a, 0x85, 0x1a, 0x17, 0x24, 0xe7, 0xea, 0x8d, 0xb1, 0xb5,
	0x6d, 0xb3, 0xb8, 0xb8, 0xd7, 0x32, 0xfa, 0x07, 0x2a, 0x49, 0x16, 0xb1, 0x05, 0xae, 0xb5, 0x4b,
	0x9d, 0xa6, 0x6f, 0x0a, 0xe4, 0xc0, 0x51, 0xc8, 0x05, 0x7f, 0x4c, 0x44, 0x9e, 0x11, 0xc1, 0xa9,
	0x58, 0xe2, 0xfa, 0xf6, 0xff, 0xad, 0x17, 0x3a, 0x55, 0x10, 0x9d, 0xc0, 0xa1, 0xee, 0xed, 0x25,
	0x6e, 0x6c, 0xdb, 0x0a, 0x11, 0xbd, 0x87, 0x96, 0xba, 0x13, 0x91, 0x42, 0xbd, 0x03, 0xe3, 0x11,
	0x6e, 0xee, 0xbc, 0x83, 0x82, 0x81, 0x98, 0x69, 0xa4, 0xee, 0xb7, 0x64, 0x1b, 0xba, 0x78, 0xee,
	0xf9, 0xd1, 0xce, 0xfd, 0x34, 0x2a, 0x9a, 0x7f, 0x0e, 0xa6, 0x2c, 0xda, 0x6f, 0xef, 0xbc, 0x98,
	0x26, 0x7a, 0x0e, 0xba, 0x0c, 0x6a, 0x2f, 0x9d, 0x44, 0x2d, 0xd8, 0xea, 0xa5, 0xbd, 0x87, 0x8e,
	0xa0, 0xee, 0x06, 0x64, 0x38, 0x18, 0x8f, 0xaf, 0x07, 0xc3, 0xaf, 0x76, 0xa9, 0x30, 0xdc, 0x4d,
	0xbd, 0x49, 0x30, 0xf2, 0xed, 0x32, 0x6a, 0x42, 0xcd, 0x0d, 0xc8, 0x2c, 0x18, 0x04, 0xde, 0xd0,
	0xde, 0x2f, 0x4a, 0xef, 0xcb, 0x64, 0xea, 0x8f, 0xec, 0x83, 0xe7, 0x72, 0x32, 0xf6, 0x26, 0x23,
	0xbb, 0xd2, 0xbd, 0x81, 0x6a, 0x31, 0x61, 0x2a, 0xe7, 0xf7, 0x8c, 0xd9, 0x7b, 0xc8, 0x82, 0xb2,
	0x37, 0x23, 0x9f, 0x6c, 0x0b, 0xd5, 0xa0, 0xe2, 0xcd, 0xc8, 0x87, 0x2b, 0xdb, 0x2e, 0x3e, 0x2f,
	0x2f, 0xec, 0x76, 0xf1, 0x79, 0xf5, 0xd1, 0xfe, 0xdc, 0x0f, 0xa0, 0x65, 0x76, 0x8a, 0x2c, 0x59,
	0x4c, 0x45, 0x2a, 0xd1, 0xff, 0x8e, 0x59, 0x2b, 0xe7, 0x79, 0xad, 0x1c, 0x97, 0xc5, 0xb4, 0xd8,
	0x1f, 0xfc, 0x53, 0x4d, 0x77, 0xfd, 0xa2, 0xe5, 0xec, 0xac, 0x95, 0xdf, 0x34, 0x21, 0xae, 0xc9,
	0xe8, 0xdf, 0x43, 0x21, 0x90, 0x24, 0x8b, 0x54, 0xe8, 0xbb, 0x3f, 0x42, 0x8b, 0xc9, 0x79, 0x23,
	0xb7, 0x61, 0x62, 0x6e, 0x75, 0xca, 0xd6, 0x61, 0x55, 0x1b, 0x5f, 0x3f, 0xac, 0x1a, 0xdc, 0xbf,
	0x3b, 0xec, 0xc8, 0x64, 0xf4, 0x5d, 0x38, 0x34, 0x02, 0x3a, 0x79, 0xe5, 0xea, 0x34, 0x5e, 0xbc,
	0x11, 0x57, 0xfc, 0x7d, 0x7d, 0x0c, 0x78, 0xc9, 0x9c, 0x55, 0x98, 0x66, 0xcc, 0x59, 0x09, 0xc9,
	0x9c, 0xef, 0x69, 0xe8, 0x18, 0xf6, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x04, 0x05, 0xe3, 0x43, 0xd0,
	0x04, 0x00, 0x00,
}
